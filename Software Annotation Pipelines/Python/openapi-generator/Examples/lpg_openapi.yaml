openapi: 3.0.0
info:
  title: My Spec
  version: 1.0.0
paths: {}
components:
  schemas:
    CalcOption:
      type: string
      enum:
      - HouseSumProfilesFromDetailedDats
      - OverallDats
      - OverallSum
      - DetailedDatFiles
      - ActionCarpetPlot
      - TimeOfUsePlot
      - VariableLogFile
      - ActivationsPerHour
      - DaylightTimesList
      - ActivationFrequencies
      - DeviceProfilesIndividualHouseholds
      - TotalsPerLoadtype
      - HouseholdContents
      - TemperatureFile
      - TotalsPerDevice
      - EnergyStorageFile
      - DurationCurve
      - DesiresLogfile
      - ThoughtsLogfile
      - PolysunImportFiles
      - CriticalViolations
      - SumProfileExternalEntireHouse
      - SumProfileExternalIndividualHouseholds
      - WeekdayProfiles
      - AffordanceEnergyUse
      - TimeProfileFile
      - LocationsFile
      - HouseholdPlan
      - DeviceProfileExternalEntireHouse
      - DeviceProfileExternalIndividualHouseholds
      - MakeGraphics
      - MakePDF
      - LocationCarpetPlot
      - PersonStatus
      - TransportationDeviceCarpetPlot
      - LogErrorMessages
      - LogAllMessages
      - TransportationStatistics
      - ActionsEachTimestep
      - CalculationFlameChart
      - SumProfileExternalIndividualHouseholdsAsJson
      - JsonHouseSumFiles
      - BodilyActivityStatistics
      - BasicOverview
      - DeviceActivations
      - LocationsEntries
      - ActionEntries
      - AffordanceTaggingSets
      - DeviceProfilesHouse
      - HouseholdSumProfilesFromDetailedDats
      - JsonHouseholdSumFiles
      - JsonDeviceProfilesIndividualHouseholds
      - TansportationDeviceJsons
      - DeviceTaggingSets
      - AffordanceDefinitions
      - JsonHouseholdSumFilesNoFlex
      - HouseholdSumProfilesCsvNoFlex
      - FlexibilityEvents
      - DeleteDatFiles
    EnergyIntensityType:
      type: string
      enum:
      - EnergySaving
      - Random
      - EnergyIntensive
      - AsOriginal
      - EnergySavingPreferMeasured
      - EnergyIntensivePreferMeasured
    Gender:
      type: string
      enum:
      - Male
      - Female
    StrGuid:
      type: object
      properties:
        StrVal:
          type: string
    JsonReference:
      type: object
      properties:
        Name:
          type: string
        Guid:
          $ref: '#/components/schemas/StrGuid'
    TransportationPreference:
      type: object
      properties:
        DestinationSite:
          $ref: '#/components/schemas/JsonReference'
        DistanceFromHome:
          type: number
        Angle:
          type: number
        TransportationDeviceCategories:
          type: array
          items:
            $ref: '#/components/schemas/JsonReference'
        Weights:
          type: array
          items:
            type: number
      required:
      - DistanceFromHome
      - Angle
      - TransportationDeviceCategories
      - Weights
    PersonData:
      type: object
      properties:
        Age:
          type: integer
        Gender:
          $ref: '#/components/schemas/Gender'
        LivingPatternTag:
          type: string
        PersonName:
          type: string
        TransportationPreferences:
          type: array
          items:
            $ref: '#/components/schemas/TransportationPreference'
      required:
      - Age
      - TransportationPreferences
    HouseholdDataPersonSpecification:
      type: object
      properties:
        Persons:
          type: array
          items:
            $ref: '#/components/schemas/PersonData'
        HouseholdTags:
          type: array
          items:
            type: string
      required:
      - Persons
      - HouseholdTags
    PersonLivingTag:
      type: object
      properties:
        LivingPatternTag:
          type: string
        PersonName:
          type: string
    HouseholdTemplateSpecification:
      type: object
      properties:
        Persons:
          type: array
          items:
            $ref: '#/components/schemas/PersonLivingTag'
        HouseholdTemplateName:
          type: string
        ForbiddenTraitTags:
          type: array
          items:
            type: string
      required:
      - Persons
      - ForbiddenTraitTags
    HouseholdNameSpecification:
      type: object
      properties:
        HouseholdReference:
          $ref: '#/components/schemas/JsonReference'
    TransportationDistanceModifier:
      type: object
      properties:
        RouteKey:
          type: string
        StepKey:
          type: string
        NewDistanceInMeters:
          type: number
      required:
      - NewDistanceInMeters
    HouseholdDataSpecificationType:
      type: string
      enum:
      - ByPersons
      - ByTemplateName
      - ByHouseholdName
    HouseholdData:
      type: object
      properties:
        HouseholdDataPersonSpec:
          $ref: '#/components/schemas/HouseholdDataPersonSpecification'
        HouseholdTemplateSpec:
          $ref: '#/components/schemas/HouseholdTemplateSpecification'
        HouseholdNameSpec:
          $ref: '#/components/schemas/HouseholdNameSpecification'
        UniqueHouseholdId:
          type: string
        Name:
          type: string
        ChargingStationSet:
          $ref: '#/components/schemas/JsonReference'
        TransportationDeviceSet:
          $ref: '#/components/schemas/JsonReference'
        TravelRouteSet:
          $ref: '#/components/schemas/JsonReference'
        TransportationDistanceModifiers:
          type: array
          items:
            $ref: '#/components/schemas/TransportationDistanceModifier'
        HouseholdDataSpecification:
          $ref: '#/components/schemas/HouseholdDataSpecificationType'
    HouseData:
      type: object
      properties:
        Name:
          type: string
        HouseGuid:
          $ref: '#/components/schemas/StrGuid'
        Households:
          type: array
          items:
            $ref: '#/components/schemas/HouseholdData'
        HouseTypeCode:
          type: string
        TargetCoolingDemand:
          type: number
        TargetHeatDemand:
          type: number
      required:
      - Households
      - TargetCoolingDemand
      - TargetHeatDemand
    OutputFileDefault:
      type: string
      enum:
      - All
      - OnlyOverallSum
      - OnlySums
      - OnlyDeviceProfiles
      - Reasonable
      - ReasonableWithCharts
      - ReasonableWithChartsAndPDF
      - NoFiles
      - ForSettlementCalculations
    LoadTypePriority:
      type: string
      enum:
      - Undefined
      - Mandatory
      - RecommendedForHouseholds
      - RecommendedForHouses
      - OptionalLoadtypes
      - All
    JsonCalcSpecification:
      type: object
      description: "\n    :param LoadtypesForPostprocessing: List of all load types\
        \ to process in\n        postprocessing. Internally if you calculate a house,\
        \ the LPG needs to\n        calculate the warm water needs to correctly calculate\
        \ the electricity\n        demand from the heat pump. But maybe you don't\
        \ need the warm water\n        profiles and only want the electricity files.\
        \ Then you can put\n        Electricity here (case is important!) and the\
        \ LPG will skip everything\n        in postprocessing that is not in this\
        \ list. Leave this blank or delete\n        the option entirely if you want\
        \ all the result files.\n    :type LoadtypesForPostprocessing: List[str]\n\
        \    :param CalculationName: Name for the calculation. This is not used in\
        \ the\n        calculation and is intended for the user to store comments\
        \ or something\n        like that.\n    :type CalculationName: str\n    :param\
        \ CalcOptions: List of all calculation output options to enable. This\n  \
        \      is ADDITIONALLY to the output files enabled by the DefaultForOutputFiles\n\
        \        option!\n    :type CalcOptions: List[CalcOption]\n    :param DefaultForOutputFiles:\
        \ This sets which output files are generated.\n        You need to use one\
        \ of the defaults. If you want some additional\n        individual output,\
        \ you can use the calc options list of individual\n        settings to enable\
        \ additional things.\n    :type DefaultForOutputFiles: OutputFileDefault\n\
        \    :param DeleteAllButPDF: This option makes the LPG delete everything but\
        \ the\n        resulting PDF. This is pretty much only useful if you want\
        \ to generate a\n        full set of PDFs for all households to get a detailed\
        \ view of the\n        results for each household. Default: false\n    :type\
        \ DeleteAllButPDF: bool\n    :param DeviceSelection: If you want the people\
        \ to use certain devices, for\n        example if you want to make sure that\
        \ the people really use incandescent\n        light bulbs, then you can set\
        \ up a device selection to ensure that this\n        type of device will always\
        \ be selected.\n    :type DeviceSelection: JsonReference\n    :param EndDate:\
        \ End date of the simulation. Defaults to the 31.12. of the\n        current\
        \ year if not set. One year maximum.\n    :type EndDate: str\n    :param EnergyIntensityType:\
        \ How devices are picked for the households, for\n        example if the household\
        \ gets an old fridge or a new fridge.\n    :type EnergyIntensityType: EnergyIntensityType\n\
        \    :param ExternalTimeResolution: If you need result files in 15 min resolution\n\
        \        instead of 1 minute, then this option will help you. Set it to 00:15:00\n\
        \        to get 15 minute files. Needs to be a multiple of the internal time\n\
        \        resolution, which is normally 1 minute.\n    :type ExternalTimeResolution:\
        \ str\n    :param InternalTimeResolution: If you need result files in 30 sekunds\n\
        \        resolution instead of 1 minute, then this option will help you. Set\
        \ it\n        to 00:00:30 to get 30 second resolution files. Note that the\
        \ predefined\n        device profiles are measured with a resolution of 1\
        \ minute, so you won't\n        gain any accuracy, but it will save you the\
        \ effort of interpolating the\n        results yourself.\n    :type InternalTimeResolution:\
        \ str\n    :param GeographicLocation: The guid of the geographic location\
        \ to use. This\n        determines holidays and sunrise/sunset times.\n  \
        \  :type GeographicLocation: JsonReference\n    :param LoadTypePriority: Which\
        \ load types should be included in the\n        calculation. If you want to\
        \ calculate a house, it is required to use at\n        least the house-setting.\n\
        \    :type LoadTypePriority: LoadTypePriority\n    :param OutputDirectory:\
        \ Path to the output directory where all the files\n        will be put. Defaults\
        \ to the current path.\n    :type OutputDirectory: str\n    :param RandomSeed:\
        \ Sets the random seed. If two calculations with the same\n        random\
        \ seed are run, then the results will be identical. Defaults to -1,\n    \
        \    which means that it will be randomly selected.\n    :type RandomSeed:\
        \ int\n    :param ShowSettlingPeriod: The LPG runs a 3-day period before the\
        \ simulation\n        start to initialize the people. For debugging purposes\
        \ it is possible to\n        include this in the result files. Defaults to\
        \ false.\n    :type ShowSettlingPeriod: bool\n    :param EnableFlexibility:\
        \ Flexibility modelling seperates the electric\n        devices out that can\
        \ time shifted. The LPG then generates two distinct\n        profiles.\n \
        \   :type EnableFlexibility: bool\n    :param SkipExisting: If you enable\
        \ this, the LPG will check in the result\n        directory if this household/house\
        \ was already calculated and if so, will\n        quit quietly. Defaults to\
        \ true.\n    :type SkipExisting: bool\n    :param StartDate: Start date of\
        \ the simulation. Defaults to the 01.01. of\n        the current year if not\
        \ set.\n    :type StartDate: str\n    :param TemperatureProfile: Reference\
        \ of the temperature profile to use.\n        Defaults to the first temperature\
        \ profile in the database if not set,\n        which is probably not what\
        \ you want. Only the GUID is used to search the\n        database. The name\
        \ is ignored and only for human readability.\n    :type TemperatureProfile:\
        \ JsonReference\n    :param DeleteSqlite: This option make the LPG delete\
        \ all the SQLite result\n        files after the calculation. Only enable\
        \ this if you really only want\n        the load profiles and no further processing.\
        \ Default=false\n    :type DeleteSqlite: bool\n    :param IgnorePreviousActivitiesWhenNeeded:\
        \ When using household templates,\n        sometimes random households are\
        \ generated that don't work. With this\n        option you can force the LPG\
        \ to simulate at least some of the cases\n        anyway. Default=false\n\
        \    :type IgnorePreviousActivitiesWhenNeeded: bool\n    :param EnableIdlemode:\
        \ When using household templates, sometimes random\n        households are\
        \ generated that don't work. With this option you can force\n        the LPG\
        \ force to simulate all cases, no matter how messed up the\n        definition\
        \ is. Basically this enables a special activity \"Idle\" that\n        always\
        \ gets activated whenever the person can't find something to do.\n       \
        \ Default=false\n    :type EnableIdlemode: bool\n    "
      properties:
        LoadtypesForPostprocessing:
          type: array
          items:
            type: string
        CalculationName:
          type: string
        CalcOptions:
          type: array
          items:
            $ref: '#/components/schemas/CalcOption'
        DefaultForOutputFiles:
          $ref: '#/components/schemas/OutputFileDefault'
        DeleteAllButPDF:
          type: boolean
        DeviceSelection:
          $ref: '#/components/schemas/JsonReference'
        EndDate:
          type: string
        EnergyIntensityType:
          $ref: '#/components/schemas/EnergyIntensityType'
        ExternalTimeResolution:
          type: string
        InternalTimeResolution:
          type: string
        GeographicLocation:
          $ref: '#/components/schemas/JsonReference'
        LoadTypePriority:
          $ref: '#/components/schemas/LoadTypePriority'
        OutputDirectory:
          type: string
        RandomSeed:
          type: integer
        ShowSettlingPeriod:
          type: boolean
        EnableFlexibility:
          type: boolean
        SkipExisting:
          type: boolean
        StartDate:
          type: string
        TemperatureProfile:
          $ref: '#/components/schemas/JsonReference'
        DeleteSqlite:
          type: boolean
        IgnorePreviousActivitiesWhenNeeded:
          type: boolean
        EnableTransportation:
          type: boolean
        EnableIdlemode:
          type: boolean
      required:
      - LoadtypesForPostprocessing
      - CalcOptions
      - DeleteAllButPDF
      - RandomSeed
      - ShowSettlingPeriod
      - EnableFlexibility
      - SkipExisting
      - DeleteSqlite
      - IgnorePreviousActivitiesWhenNeeded
      - EnableTransportation
      - EnableIdlemode
    HouseDefinitionType:
      type: string
      enum:
      - HouseData
      - HouseName
    HouseReference:
      type: object
      properties:
        House:
          $ref: '#/components/schemas/JsonReference'
    HouseCreationAndCalculationJob:
      type: object
      description: "\n    :param PathToDatabase: Path to the database file to use.\
        \ Defaults to\n        profilegenerator.db3 in the current directory if not\
        \ set.\n    :type PathToDatabase: str\n    "
      properties:
        House:
          $ref: '#/components/schemas/HouseData'
        CalcSpec:
          $ref: '#/components/schemas/JsonCalcSpecification'
        HouseDefinitionType:
          $ref: '#/components/schemas/HouseDefinitionType'
        HouseRef:
          $ref: '#/components/schemas/HouseReference'
        Scenario:
          type: string
        Year:
          type: string
        DistrictName:
          type: string
        PathToDatabase:
          type: string
    HouseholdKey:
      type: object
      properties:
        Key:
          type: string
    HouseholdKeyType:
      type: string
      enum:
      - Household
      - General
      - House
    HouseholdKeyEntry:
      type: object
      properties:
        HouseDescription:
          type: string
        HouseholdDescription:
          type: string
        HHKey:
          $ref: '#/components/schemas/HouseholdKey'
        HouseholdName:
          type: string
        HouseName:
          type: string
        KeyType:
          $ref: '#/components/schemas/HouseholdKeyType'
    SingleDeviceProfile:
      type: object
      properties:
        Name:
          type: string
        Guid:
          type: string
        TagsBySet:
          type: object
          additionalProperties:
            type: string
        DeviceType:
          type: string
      required:
      - TagsBySet
    LoadTypeInformation:
      type: object
      properties:
        ConversionFaktor:
          type: number
        FileName:
          type: string
        Guid:
          $ref: '#/components/schemas/StrGuid'
        Name:
          type: string
        ShowInCharts:
          type: boolean
        UnitOfPower:
          type: string
        UnitOfSum:
          type: string
      required:
      - ConversionFaktor
      - ShowInCharts
    JsonDeviceProfiles:
      type: object
      properties:
        DeviceProfiles:
          type: array
          items:
            $ref: '#/components/schemas/SingleDeviceProfile'
        TimeResolution:
          type: string
        StartTime:
          type: string
        LoadTypeName:
          type: string
        LoadTypeDefinition:
          $ref: '#/components/schemas/LoadTypeInformation'
        Unit:
          type: string
      required:
      - DeviceProfiles
      - TimeResolution
    JsonSumProfile:
      type: object
      properties:
        Name:
          type: string
        TimeResolution:
          type: string
        Values:
          type: array
          items:
            type: number
        StartTime:
          type: string
        LoadTypeName:
          type: string
        LoadTypeDefinition:
          $ref: '#/components/schemas/LoadTypeInformation'
        Unit:
          type: string
        HouseKey:
          $ref: '#/components/schemas/HouseholdKeyEntry'
      required:
      - TimeResolution
      - Values
    TemplatePersonEntry:
      type: object
      properties:
        Age:
          type: integer
        Gender:
          $ref: '#/components/schemas/Gender'
        LivingPattern:
          type: string
        TemplateName:
          type: string
        PersonName:
          type: string
        Name:
          type: string
      required:
      - Age
