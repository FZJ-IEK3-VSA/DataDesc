{
    "dataDescVersion": "1.0",
    "openapi": "3.0.0",
    "info": {
        "title": "API Spec",
        "version": "1.0.0"
    },
    "apiFunctions": [
        {
            "identifier": "PowerOutputCalculator.process_pm",
            "inputVariables": [
                {
                    "identifier": "pm",
                    "description": "\n    Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\n    Data structure also contains labeled axes (rows and columns).\n    Arithmetic operations align on both row and column labels. Can be\n    thought of as a dict-like container for Series objects. The primary\n    pandas data structure.\n\n    Parameters\n    ----------\n    data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n        Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n        data is a dict, column order follows insertion-order. If a dict contains Series\n        which have an index defined, it is aligned by its index. This alignment also\n        occurs if data is a Series or a DataFrame itself. Alignment is done on\n        Series/DataFrame inputs.\n\n        If data is a list of dicts, column order follows insertion-order.\n\n    index : Index or array-like\n        Index to use for resulting frame. Will default to RangeIndex if\n        no indexing information part of input data and no index provided.\n    columns : Index or array-like\n        Column labels to use for resulting frame when data does not have them,\n        defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n        will perform column selection instead.\n    dtype : dtype, default None\n        Data type to force. Only a single dtype is allowed. If None, infer.\n    copy : bool or None, default None\n        Copy data from inputs.\n        For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n        or 2d ndarray input, the default of None behaves like ``copy=False``.\n        If data is a dict containing one or more Series (possibly of different dtypes),\n        ``copy=False`` will ensure that these inputs are not copied.\n\n        .. versionchanged:: 1.3.0\n\n    See Also\n    --------\n    DataFrame.from_records : Constructor from tuples, also record arrays.\n    DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n    read_csv : Read a comma-separated values (csv) file into DataFrame.\n    read_table : Read general delimited file into DataFrame.\n    read_clipboard : Read text from clipboard into DataFrame.\n\n    Notes\n    -----\n    Please reference the :ref:`User Guide <basics.dataframe>` for more information.\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary.\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df\n       col1  col2\n    0     1     3\n    1     2     4\n\n    Notice that the inferred dtype is int64.\n\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    To enforce a single dtype:\n\n    >>> df = pd.DataFrame(data=d, dtype=np.int8)\n    >>> df.dtypes\n    col1    int8\n    col2    int8\n    dtype: object\n\n    Constructing DataFrame from a dictionary including Series:\n\n    >>> d = {'col1': [0, 1, 2, 3], 'col2': pd.Series([2, 3], index=[2, 3])}\n    >>> pd.DataFrame(data=d, index=[0, 1, 2, 3])\n       col1  col2\n    0     0   NaN\n    1     1   NaN\n    2     2   2.0\n    3     3   3.0\n\n    Constructing DataFrame from numpy ndarray:\n\n    >>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n    ...                    columns=['a', 'b', 'c'])\n    >>> df2\n       a  b  c\n    0  1  2  3\n    1  4  5  6\n    2  7  8  9\n\n    Constructing DataFrame from a numpy ndarray that has labeled columns:\n\n    >>> data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n    ...                 dtype=[(\"a\", \"i4\"), (\"b\", \"i4\"), (\"c\", \"i4\")])\n    >>> df3 = pd.DataFrame(data, columns=['c', 'a'])\n    ...\n    >>> df3\n       c  a\n    0  3  1\n    1  6  4\n    2  9  7\n\n    Constructing DataFrame from dataclass:\n\n    >>> from dataclasses import make_dataclass\n    >>> Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n    >>> pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n       x  y\n    0  0  0\n    1  0  3\n    2  2  3\n\n    Constructing DataFrame from Series/DataFrame:\n\n    >>> ser = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n    >>> df = pd.DataFrame(data=ser, index=[\"a\", \"c\"])\n    >>> df\n       0\n    a  1\n    c  3\n\n    >>> df1 = pd.DataFrame([1, 2, 3], index=[\"a\", \"b\", \"c\"], columns=[\"x\"])\n    >>> df2 = pd.DataFrame(data=df1, index=[\"a\", \"c\"])\n    >>> df2\n       x\n    a  1\n    c  3\n    ",
                    "required": true,
                    "dataSchema": {
                        "type": "object",
                        "properties": [
                            {
                                "identifier": "T2M",
                                "type": "number",
                                "properties": [
                                    {
                                        "identifier": "long_name",
                                        "type": "string",
                                        "example": "2 meter air temperature"
                                    }
                                ],
                                "unit": "K",
                                "annotatedValue" : "DEF",
                                "dimensions": [
                                    "lat",
                                    "lon",
                                    "time"
                                ]
                            }
                        ],
                        "dimensions": [
                            {
                                "identifier": "location_of_measurement",
                                "properties": [
                                    {
                                        "identifier": "location",
                                        "type": "string",
                                        "description": "The location of the measurement",
                                        "unit": "country name"
                                    }
                                ]
                            },
                            {
                                "identifier": "time_of_measurement",
                                "properties": [
                                    {
                                        "identifier": "time",
                                        "type": "string",
                                        "description": "The time of the measurement",
                                        "unit": "days since 1895-01-01"
                                    }
                                ]
                            }
                        ],
                        "format": {
                            "example": "DataFrame"
                        }
                    }
                }
            ],
            "outputVariables": [
                {
                    "identifier": "return",
                    "description": "Marker object for Signature.empty and Parameter.empty.",
                    "required": true,
                    "dataSchema": {
                        "type": "object",
                        "format": {
                            "example": "_empty"
                        }
                    }
                }
            ]
        },
        {
            "identifier": "PowerOutputCalculator.subtract_value",
            "inputVariables": [
                {
                    "identifier": "minuend",
                    "required": true,
                    "dataSchema": {
                        "type": "integer",
                        "properties": [
                            {
                                "identifier": "domain",
                                "type": "str",
                                "default": "real"
                            }
                        ]
                    }
                },
                {
                    "identifier": "subtrahend",
                    "required": true,
                    "dataSchema": {
                        "type": "integer",
                        "properties": [
                            {
                                "identifier": "domain",
                                "type": "str",
                                "default": "real"
                            }
                        ]
                    }
                }
            ],
            "outputVariables": [
                {
                    "identifier": "return",
                    "description": "Marker object for Signature.empty and Parameter.empty.",
                    "required": true,
                    "dataSchema": {
                        "type": "object",
                        "format": {
                            "example": "_empty"
                        }
                    }
                }
            ]
        }
    ]
}